{
  "_args": [
    [
      {
        "raw": "socket.io-p2p@github:tommytee/socket.io-p2p",
        "scope": null,
        "escapedName": "socket.io-p2p",
        "name": "socket.io-p2p",
        "rawSpec": "github:tommytee/socket.io-p2p",
        "spec": "github:tommytee/socket.io-p2p",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:tommytee/socket.io-p2p.git",
          "sshUrl": "git+ssh://git@github.com/tommytee/socket.io-p2p.git",
          "httpsUrl": "git+https://github.com/tommytee/socket.io-p2p.git",
          "gitUrl": "git://github.com/tommytee/socket.io-p2p.git",
          "shortcut": "github:tommytee/socket.io-p2p",
          "directUrl": "https://raw.githubusercontent.com/tommytee/socket.io-p2p/master/package.json"
        }
      },
      "/Users/jif/Documents/CU/LPC/LPCode/patchpanel/src/clients/reactml"
    ]
  ],
  "_from": "tommytee/socket.io-p2p",
  "_id": "socket.io-p2p@2.2.0",
  "_inCache": true,
  "_location": "/socket.io-p2p",
  "_phantomChildren": {},
  "_requested": {
    "raw": "socket.io-p2p@github:tommytee/socket.io-p2p",
    "scope": null,
    "escapedName": "socket.io-p2p",
    "name": "socket.io-p2p",
    "rawSpec": "github:tommytee/socket.io-p2p",
    "spec": "github:tommytee/socket.io-p2p",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:tommytee/socket.io-p2p.git",
      "sshUrl": "git+ssh://git@github.com/tommytee/socket.io-p2p.git",
      "httpsUrl": "git+https://github.com/tommytee/socket.io-p2p.git",
      "gitUrl": "git://github.com/tommytee/socket.io-p2p.git",
      "shortcut": "github:tommytee/socket.io-p2p",
      "directUrl": "https://raw.githubusercontent.com/tommytee/socket.io-p2p/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/tommytee/socket.io-p2p.git#a4a4b0cbe92185a730bc244680f39d9bb6016d32",
  "_shasum": "758140d778515ad7e17a9732ac254099ae07b644",
  "_shrinkwrap": null,
  "_spec": "socket.io-p2p@github:tommytee/socket.io-p2p",
  "_where": "/Users/jif/Documents/CU/LPC/LPCode/patchpanel/src/clients/reactml",
  "author": {
    "name": "Tom Cartwright",
    "email": "tecartwright@gmail.com",
    "url": "http://tomcartwright.net"
  },
  "bugs": {
    "url": "https://github.com/socketio/socket.io-p2p/issues"
  },
  "dependencies": {
    "component-bind": "^1.0.0",
    "component-emitter": "^1.2.1",
    "debug": "^2.6.3",
    "extend.js": "0.0.2",
    "has-binary": "0.1.7",
    "hat": "^0.0.3",
    "simple-peer": "^7.0.0",
    "socket.io-p2p-parser": "github:tomcartwrightuk/socket.io-p2p-parser",
    "to-array": "^0.1.4",
    "webrtcsupport": "^2.2.0"
  },
  "description": "WebRTC data channel communication with a socket.io-like API",
  "devDependencies": {
    "concat-stream": "^1.6.0",
    "ecstatic": "0.8.0",
    "envify": "^3.4.0",
    "expect": "^1.1.0",
    "expect.js": "^0.3.1",
    "inherits": "~2.0.1",
    "simple-get": "^1.4.3",
    "socket.io": "^1.7.3",
    "socket.io-client": "^1.7.3",
    "socket.io-p2p-server": "^1.2.0",
    "standard": "^10.0.0",
    "tape": "^4.6.3",
    "xhr": "^2.4.0",
    "zuul": "^3.11.1"
  },
  "gitHead": "a4a4b0cbe92185a730bc244680f39d9bb6016d32",
  "homepage": "https://github.com/socketio/socket.io-p2p#readme",
  "keywords": [
    "webrtc",
    "peer-to-peer"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "socket.io-p2p",
  "optionalDependencies": {},
  "readme": "![](https://cldup.com/95U80xyuHq.svg)\n\nThis module provides an **easy** and **reliable** way to setup a WebRTC connection between peers and communicate using events (the [socket.io-protocol](https://github.com/Automattic/socket.io-protocol)).\n\nSocket.IO is used to transport [signalling data](http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/#what-is-signaling) and as a fallback for clients where WebRTC `PeerConnection` is not supported.\n\n## How to use\n\nCreate a socket connection, pass it to `P2P`. On the Client:\n\n```js\nvar P2P = require('socket.io-p2p');\nvar io = require('socket.io-client');\nvar socket = io();\n\nvar p2p = new P2P(socket);\n\np2p.on('ready', function(){\n  p2p.usePeerConnection = true;\n  p2p.emit('peer-obj', { peerId: peerId });\n})\n\n// this event will be triggered over the socket transport\n// until `usePeerConnection` is set to `true`\np2p.on('peer-msg', function(data){\n  console.log(data);\n});\n```\n\nIf you're not using browserify, then use the included standalone file `socketiop2p.min.js`. This exports a `P2P` constructor on `window`.\n\nOn the server, use the [socket.io-p2p-server](https://github.com/tomcartwrightuk/socket.io-p2p-server) to take care of signalling. All clients who support WebRTC data connections will exchange signalling data via the default `/` namespace.\n\n```js\nvar server = require('http').createServer();\nvar io = require('socket.io')(server);\nvar p2p = require('socket.io-p2p-server').Server;\nio.use(p2p);\nserver.listen(3030);\n```\n\nWebRTC Peer connections can also be established by exchanging signalling data within a socket.io room. Do this by calling the `p2p` server within the `connection` callback:\n\n```js\nvar server = require('http').createServer();\nvar io = require('socket.io')(server);\nvar p2p = require('socket.io-p2p-server').Server;\nserver.listen(3030);\n\nio.on('connection', function(socket){\n  clients[socket.id] = socket;\n  socket.join(roomName);\n  p2p(socket, null, room);\n});\n```\n\nSee [chat app](https://github.com/socketio/socket.io-p2p/tree/master/examples/chat) for full example.\n\n## API\n\n### `p2psocket = new P2P(socket, opts, cb)`\n\nCreate a new socket.io-p2p connection.\n\nThe `opts` object can include options for setup of the overall socket.io-p2p connection as well as options for the individual peers - specified using `peerOpts`.\n\n- `numClients` - max number of peers each client can connect to; `5` by default.\n- `autoUpgrade` - upgrade to a p2p connection (from s.io one) when peers are ready; `true` by default\n- `peerOpts` - object of options to be passed to underlying peers. See [here](https://github.com/feross/simple-peer/blob/master/README.md#api) for currently supported options. See [here](examples/streaming) for an example.\n\n`cb` is an optional callback. Called when connection is upgraded to a WebRTC connection.\n\n### `p2psocket.on('upgrade', function (data) {})`\n\nTriggered when P2P connection is converted to a WebRTC one.\n\n### `p2psocket.on('peer-error', function (data) {})`\n\nTriggered when a `PeerConnection` object errors during signalling.\n\n## Roadmap of development\n\n- Support for packets containing multiple binary blobs - packets can only contain one blob in this version\n- Allow a peer to act as a relay between peers that don't support PeerConnection and those that do.\n\nPRs and issue reports are most welcome.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/socketio/socket.io-p2p.git"
  },
  "scripts": {
    "build": "browserify -s P2P -r ./ | uglifyjs -m > socketiop2p.min.js",
    "sauce-test": "export $(cat .env | xargs) && node tasks/fetch_ice.js && ./node_modules/zuul/bin/zuul -- test/specs/*.js",
    "test": "./node_modules/standard/bin/cmd.js && node tasks/fetch_ice.js && ./node_modules/zuul/bin/zuul -- test/specs/*.js",
    "test-local": "export $(cat .env | xargs) && ./node_modules/zuul/bin/zuul --open --local 8000 -- test/specs/*.js"
  },
  "version": "2.2.0"
}
